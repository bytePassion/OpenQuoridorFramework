//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OQF.Resources.LanguageDictionaries {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Captions {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Captions() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("OQF.Resources.LanguageDictionaries.Captions", typeof(Captions).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name.
        /// </summary>
        public static string AP_ApplicationNameSubItem {
            get {
                return ResourceManager.GetString("AP_ApplicationNameSubItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application.
        /// </summary>
        public static string AP_ApplicationSectionHeader {
            get {
                return ResourceManager.GetString("AP_ApplicationSectionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version.
        /// </summary>
        public static string AP_ApplicationVersionSubItem {
            get {
                return ResourceManager.GetString("AP_ApplicationVersionSubItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Developed by.
        /// </summary>
        public static string AP_DevelopedBy {
            get {
                return ResourceManager.GetString("AP_DevelopedBy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Developers.
        /// </summary>
        public static string AP_DeveloperSectionHeader {
            get {
                return ResourceManager.GetString("AP_DeveloperSectionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Licence.
        /// </summary>
        public static string AP_LicenceSectionHeader {
            get {
                return ResourceManager.GetString("AP_LicenceSectionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to About OpenQuoridorFramework.
        /// </summary>
        public static string AP_PageHeader {
            get {
                return ResourceManager.GetString("AP_PageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inventor.
        /// </summary>
        public static string AP_QuoridorInventorSubItem {
            get {
                return ResourceManager.GetString("AP_QuoridorInventorSubItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Publisher.
        /// </summary>
        public static string AP_QuoridorPublisherSubItem {
            get {
                return ResourceManager.GetString("AP_QuoridorPublisherSubItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Quoridor.
        /// </summary>
        public static string AP_QuoridorSectionHeader {
            get {
                return ResourceManager.GetString("AP_QuoridorSectionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SourceCode.
        /// </summary>
        public static string AP_SourceCodeSectionHeader {
            get {
                return ResourceManager.GetString("AP_SourceCodeSectionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sourceCode of the OpenQuoridorFramework can be found on gitHub.
        /// </summary>
        public static string AP_SourceCodeSectionText {
            get {
                return ResourceManager.GetString("AP_SourceCodeSectionText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 3rd Party Usages.
        /// </summary>
        public static string AP_ThirdPartySectionHeader {
            get {
                return ResourceManager.GetString("AP_ThirdPartySectionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version.
        /// </summary>
        public static string AP_VersionSectionHeader {
            get {
                return ResourceManager.GetString("AP_VersionSectionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want exit during a ongoing game?.
        /// </summary>
        public static string ClosingDialogMessage {
            get {
                return ResourceManager.GetString("ClosingDialogMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bot cannot be loaded as assembly.
        /// </summary>
        public static string ErrorMsg_BotCanNotBeLoadedFromAsembly {
            get {
                return ResourceManager.GetString("ErrorMsg_BotCanNotBeLoadedFromAsembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File cannot be loaded as text.
        /// </summary>
        public static string ErrorMsg_FileCannotBeLoadedAsText {
            get {
                return ResourceManager.GetString("ErrorMsg_FileCannotBeLoadedAsText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File does not exist.
        /// </summary>
        public static string ErrorMsg_FileDoesNotExist {
            get {
                return ResourceManager.GetString("ErrorMsg_FileDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File is no valid assembly.
        /// </summary>
        public static string ErrorMsg_FileIsNoAssembly {
            get {
                return ResourceManager.GetString("ErrorMsg_FileIsNoAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have to choose a Bot-DLL before Starting a game.
        /// </summary>
        public static string ErrorMsg_NoDllPath {
            get {
                return ResourceManager.GetString("ErrorMsg_NoDllPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BoardState.
        /// </summary>
        public static string HTWAB_BoardStateParagraphHeader {
            get {
                return ResourceManager.GetString("HTWAB_BoardStateParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current situation on the board is represented by the BoardState-class. All game-relevant informations are stored in it: all placed walls, the states of both players and the player who&apos;s turn it is. Additional to that can the complete game-history be reviewed by looking at LastBoardState and LastMove..
        /// </summary>
        public static string HTWAB_BoardStateParagraphText {
            get {
                return ResourceManager.GetString("HTWAB_BoardStateParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Examplary implementation.
        /// </summary>
        public static string HTWAB_ExampleParagraphHeader {
            get {
                return ResourceManager.GetString("HTWAB_ExampleParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SimpleWalking bot is an examplary bot-implementation. You find it within the OpenQoridorFramework at &apos;OpenQuoridorFramework/Bots/SimpleWalkingBot/SimpleWalkingBot.cs&apos; within the Git-repository (see About)..
        /// </summary>
        public static string HTWAB_ExampleParagraphText {
            get {
                return ResourceManager.GetString("HTWAB_ExampleParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FieldCoordinate.
        /// </summary>
        public static string HTWAB_FieldCoordinateParagraphHeader {
            get {
                return ResourceManager.GetString("HTWAB_FieldCoordinateParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A FieldCoordinate defines a unique position on the board (see Quoridor-notation). The X- and Y-coordinate are implemented as enumerations..
        /// </summary>
        public static string HTWAB_FieldCoordinateParagraphText {
            get {
                return ResourceManager.GetString("HTWAB_FieldCoordinateParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GameContraints.
        /// </summary>
        public static string HTWAB_GameConstraintsParagraphHeader {
            get {
                return ResourceManager.GetString("HTWAB_GameConstraintsParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The GameConstraints-class contains the two restrictions for a bot for a game. One is the maximal timespan a bot can take to think about its next move. The other is the maximum of total moves each player can make in this game, before it is aborted..
        /// </summary>
        public static string HTWAB_GameConstraintsParagraphText {
            get {
                return ResourceManager.GetString("HTWAB_GameConstraintsParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1. The method Init(PlayerType, GameConstraints) is called. Thereby the bot is told on which side of the board he is starting and how the constraints for the upcomming game are..
        /// </summary>
        public static string HTWAB_GameFlowItem1 {
            get {
                return ResourceManager.GetString("HTWAB_GameFlowItem1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 2. Now the game is started. Every time when its the turn of the bot, the method DoMove(BoardState) is called. The argument tells how the current situation of the board is..
        /// </summary>
        public static string HTWAB_GameFlowItem2 {
            get {
                return ResourceManager.GetString("HTWAB_GameFlowItem2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 3. Now the bot has so much time, as the GameConstraints told him, to fire the NextMoveAvailable-Event to submit his next move..
        /// </summary>
        public static string HTWAB_GameFlowItem3 {
            get {
                return ResourceManager.GetString("HTWAB_GameFlowItem3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 4. Then it is the opponend players turn. When he has finished moving and it is your turn again, the DoMove(BoardState)-method is called again. This will be repeated until there is a winner..
        /// </summary>
        public static string HTWAB_GameFlowItem4 {
            get {
                return ResourceManager.GetString("HTWAB_GameFlowItem4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 5. A bot can always submit a debug-message to the UI by fireing the DebugMessageAvailable-Event..
        /// </summary>
        public static string HTWAB_GameFlowItem5 {
            get {
                return ResourceManager.GetString("HTWAB_GameFlowItem5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The bot&apos;s view of the Gameflow.
        /// </summary>
        public static string HTWAB_GameFlowParagraphHeader {
            get {
                return ResourceManager.GetString("HTWAB_GameFlowParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1. Create new solution with an empty project (of type ClassLibrary).
        /// </summary>
        public static string HTWAB_GeneralProceedingItem1 {
            get {
                return ResourceManager.GetString("HTWAB_GeneralProceedingItem1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 2. Add OQF.Bot.Contracts.dll as reference to the project.
        /// </summary>
        public static string HTWAB_GeneralProceedingItem2 {
            get {
                return ResourceManager.GetString("HTWAB_GeneralProceedingItem2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 3. Create a bot-class and derive it from IQuoridorBot.
        /// </summary>
        public static string HTWAB_GeneralProceedingItem3 {
            get {
                return ResourceManager.GetString("HTWAB_GeneralProceedingItem3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 4. Implement the IQuoridor-interface.
        /// </summary>
        public static string HTWAB_GeneralProceedingItem4 {
            get {
                return ResourceManager.GetString("HTWAB_GeneralProceedingItem4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 5. Start an test-application (e.g. PlayerVsBot) and test your bot.
        /// </summary>
        public static string HTWAB_GeneralProceedingItem5 {
            get {
                return ResourceManager.GetString("HTWAB_GeneralProceedingItem5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to General Proceeding.
        /// </summary>
        public static string HTWAB_GeneralProceedingParagraphHeader {
            get {
                return ResourceManager.GetString("HTWAB_GeneralProceedingParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hint.
        /// </summary>
        public static string HTWAB_HintParagraphHeader {
            get {
                return ResourceManager.GetString("HTWAB_HintParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can simplify your debugging-process by modifying the properties of your bot-project in a way that the test-application PlayerVsBot is started automaticly with the bot loaded every time you start debugging. To do so (an example is shown in the picture above) you have to adjust the StartAction to launch the PlayerVsBot-application. In addition to that you have to add the result of the build-process (your bot-dll) as command-line-parameter for the test-application. Don&apos;t forget the quotation marks if there [rest of string was truncated]&quot;;.
        /// </summary>
        public static string HTWAB_HintParagraphText {
            get {
                return ResourceManager.GetString("HTWAB_HintParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Important Classes/Enums/Structs at the OQF.Bot.Contracts.dll.
        /// </summary>
        public static string HTWAB_ImportantClassesParagraphHeader {
            get {
                return ResourceManager.GetString("HTWAB_ImportantClassesParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Note: All classes and structs are designed and implemented as immutables..
        /// </summary>
        public static string HTWAB_ImportantClassesParagraphNote {
            get {
                return ResourceManager.GetString("HTWAB_ImportantClassesParagraphNote", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Move(s).
        /// </summary>
        public static string HTWAB_MovesParagraphHeader {
            get {
                return ResourceManager.GetString("HTWAB_MovesParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Based on the abstract superclass Move, there are 3 different moves to choose from each turn. The FigureMove, to move the Pawn, the WallMove, to place a wall on the board, and the Capitulation, if you think there is no chance of winning any more..
        /// </summary>
        public static string HTWAB_MovesParagraphText {
            get {
                return ResourceManager.GetString("HTWAB_MovesParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How to write a bot.
        /// </summary>
        public static string HTWAB_PageHeader {
            get {
                return ResourceManager.GetString("HTWAB_PageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Player and PlayerState.
        /// </summary>
        public static string HTWAB_PlayerAndStateParagraphHeader {
            get {
                return ResourceManager.GetString("HTWAB_PlayerAndStateParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Player-class defines the invariant values of a player. These are the name of player and his starting position (PlayerType) on the board. The current status of a player is represented by the PlayerState-class. There you can find a reference to the player, the current position of the player on the board and number of wall the has left to spend..
        /// </summary>
        public static string HTWAB_PlayerAndStateParagraphText {
            get {
                return ResourceManager.GetString("HTWAB_PlayerAndStateParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wall.
        /// </summary>
        public static string HTWAB_WallParagraphHeader {
            get {
                return ResourceManager.GetString("HTWAB_WallParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Wall-Class defines a wall on the board by its position and orientation (see Quoridor-notation). The position is FieldCoordinate and the orientation is defined by another enumeration..
        /// </summary>
        public static string HTWAB_WallParagraphText {
            get {
                return ResourceManager.GetString("HTWAB_WallParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to About.
        /// </summary>
        public static string IP_AboutButtonCaption {
            get {
                return ResourceManager.GetString("IP_AboutButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application Help.
        /// </summary>
        public static string IP_BotVsBotIntoButtonCaption {
            get {
                return ResourceManager.GetString("IP_BotVsBotIntoButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close.
        /// </summary>
        public static string IP_CloseButtonCaption {
            get {
                return ResourceManager.GetString("IP_CloseButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How to write a bot.
        /// </summary>
        public static string IP_HowToWriteABotButtonCaption {
            get {
                return ResourceManager.GetString("IP_HowToWriteABotButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application Help.
        /// </summary>
        public static string IP_PlayerVsBotInfoButtonCaption {
            get {
                return ResourceManager.GetString("IP_PlayerVsBotInfoButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Quoridor Notation.
        /// </summary>
        public static string IP_QuoridorNotationButtonCaption {
            get {
                return ResourceManager.GetString("IP_QuoridorNotationButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Quoridor Rules.
        /// </summary>
        public static string IP_QuoridorRulesButtonCaption {
            get {
                return ResourceManager.GetString("IP_QuoridorRulesButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application Help.
        /// </summary>
        public static string IP_ReplayViewerInfoButtonCaption {
            get {
                return ResourceManager.GetString("IP_ReplayViewerInfoButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application Help.
        /// </summary>
        public static string IP_TournamentInfoButtonCaption {
            get {
                return ResourceManager.GetString("IP_TournamentInfoButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Activate.
        /// </summary>
        public static string LSv_ActivateButtonCaption {
            get {
                return ResourceManager.GetString("LSv_ActivateButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connected clients:.
        /// </summary>
        public static string LSv_ConnectedClientsSectionCaption {
            get {
                return ResourceManager.GetString("LSv_ConnectedClientsSectionCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deactivate.
        /// </summary>
        public static string LSv_DeactivateButtonCaption {
            get {
                return ResourceManager.GetString("LSv_DeactivateButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you really want to deactivate the server?.
        /// </summary>
        public static string LSv_DeactivateServerConfirmationPromt {
            get {
                return ResourceManager.GetString("LSv_DeactivateServerConfirmationPromt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Game overview:.
        /// </summary>
        public static string LSv_GameOverviewSectionCaption {
            get {
                return ResourceManager.GetString("LSv_GameOverviewSectionCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select server-address:.
        /// </summary>
        public static string LSv_SelectServerAddressPromt {
            get {
                return ResourceManager.GetString("LSv_SelectServerAddressPromt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server-Log:.
        /// </summary>
        public static string LSv_ServerLogSectionCaption {
            get {
                return ResourceManager.GetString("LSv_ServerLogSectionCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel created game.
        /// </summary>
        public static string NCl_CancelCreatedGameButtonCaption {
            get {
                return ResourceManager.GetString("NCl_CancelCreatedGameButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you really want to cancel your created game?.
        /// </summary>
        public static string NCl_Confirmation_CancelGame {
            get {
                return ResourceManager.GetString("NCl_Confirmation_CancelGame", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you really want to disconnect from the server?.
        /// </summary>
        public static string NCl_Confirmation_Disconnect {
            get {
                return ResourceManager.GetString("NCl_Confirmation_Disconnect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you really want to leave the current game?.
        /// </summary>
        public static string NCl_Confirmation_LeaveGame {
            get {
                return ResourceManager.GetString("NCl_Confirmation_LeaveGame", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not connected.
        /// </summary>
        public static string NCl_ConnectionStatus_NotConnected {
            get {
                return ResourceManager.GetString("NCl_ConnectionStatus_NotConnected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trying to connect .....
        /// </summary>
        public static string NCl_ConnectionStatus_TryingToConnect {
            get {
                return ResourceManager.GetString("NCl_ConnectionStatus_TryingToConnect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connect to server.
        /// </summary>
        public static string NCl_ConnectToServerButtonCaption {
            get {
                return ResourceManager.GetString("NCl_ConnectToServerButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create game.
        /// </summary>
        public static string NCl_CreateGameButtonCaption {
            get {
                return ResourceManager.GetString("NCl_CreateGameButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disconnect from server.
        /// </summary>
        public static string NCl_DisconectFromServerButtonCaption {
            get {
                return ResourceManager.GetString("NCl_DisconectFromServerButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Join selected game.
        /// </summary>
        public static string NCl_JoinGameButtonCaption {
            get {
                return ResourceManager.GetString("NCl_JoinGameButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Leave current game.
        /// </summary>
        public static string NCl_LeaveGameButtonCaption {
            get {
                return ResourceManager.GetString("NCl_LeaveGameButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to - it&apos;s your turn.
        /// </summary>
        public static string NCl_LocalPlayerStatus {
            get {
                return ResourceManager.GetString("NCl_LocalPlayerStatus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You lost this game..
        /// </summary>
        public static string NCL_LoosingMessage {
            get {
                return ResourceManager.GetString("NCL_LoosingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connection-Options.
        /// </summary>
        public static string NCl_NetworkViewCaption {
            get {
                return ResourceManager.GetString("NCl_NetworkViewCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to game-name.
        /// </summary>
        public static string NCl_NewGameNameHint {
            get {
                return ResourceManager.GetString("NCl_NewGameNameHint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Choose a name for the new game:.
        /// </summary>
        public static string NCl_NewGameNamePromt {
            get {
                return ResourceManager.GetString("NCl_NewGameNamePromt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No game started.
        /// </summary>
        public static string NCl_NoGameStartedNotice {
            get {
                return ResourceManager.GetString("NCl_NoGameStartedNotice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Games to join:.
        /// </summary>
        public static string NCl_OpenGameListSectionHeader {
            get {
                return ResourceManager.GetString("NCl_OpenGameListSectionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to your game alias.
        /// </summary>
        public static string NCl_PlayerNameHint {
            get {
                return ResourceManager.GetString("NCl_PlayerNameHint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Choose player name:.
        /// </summary>
        public static string NCl_PlayerNamePromt {
            get {
                return ResourceManager.GetString("NCl_PlayerNamePromt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to is thinking .....
        /// </summary>
        public static string NCl_RemotePlayerStatus {
            get {
                return ResourceManager.GetString("NCl_RemotePlayerStatus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IP-address.
        /// </summary>
        public static string NCl_ServerAddressHint {
            get {
                return ResourceManager.GetString("NCl_ServerAddressHint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter Server address:.
        /// </summary>
        public static string NCl_ServerAddressPromt {
            get {
                return ResourceManager.GetString("NCl_ServerAddressPromt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Congratulations! You won this game!.
        /// </summary>
        public static string NCl_WinningMessage {
            get {
                return ResourceManager.GetString("NCl_WinningMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ok.
        /// </summary>
        public static string ND_OkButtonCaption {
            get {
                return ResourceManager.GetString("ND_OkButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto scroll down.
        /// </summary>
        public static string PvB_AutoScrollDownCheckBoxCaption {
            get {
                return ResourceManager.GetString("PvB_AutoScrollDownCheckBoxCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bot Name.
        /// </summary>
        public static string PvB_BotNameLabelCaption {
            get {
                return ResourceManager.GetString("PvB_BotNameLabelCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Browse for Bot-DLL.
        /// </summary>
        public static string PvB_BrowseForBotButtonToolTipCaption {
            get {
                return ResourceManager.GetString("PvB_BrowseForBotButtonToolTipCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capitulate.
        /// </summary>
        public static string PvB_CapitulateButtonCaption {
            get {
                return ResourceManager.GetString("PvB_CapitulateButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compressed progress-string.
        /// </summary>
        public static string PvB_CompressedProgressCaption {
            get {
                return ResourceManager.GetString("PvB_CompressedProgressCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copy compressed progress to clipboad.
        /// </summary>
        public static string PvB_CopyToClipboardButtonToolTipCpation {
            get {
                return ResourceManager.GetString("PvB_CopyToClipboardButtonToolTipCpation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug.
        /// </summary>
        public static string PvB_DebugCaption {
            get {
                return ResourceManager.GetString("PvB_DebugCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save current Debug output.
        /// </summary>
        public static string PvB_DumpDebugFileDialogTitle {
            get {
                return ResourceManager.GetString("PvB_DumpDebugFileDialogTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save.
        /// </summary>
        public static string PvB_DumpDebugToFileButtonCaption {
            get {
                return ResourceManager.GetString("PvB_DumpDebugToFileButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save current Progress.
        /// </summary>
        public static string PvB_DumpProgressFileDialogTitle {
            get {
                return ResourceManager.GetString("PvB_DumpProgressFileDialogTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save.
        /// </summary>
        public static string PvB_DumpProgressToFileButtonCaption {
            get {
                return ResourceManager.GetString("PvB_DumpProgressToFileButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Player.
        /// </summary>
        public static string PvB_HeaderCaptionPlayer {
            get {
                return ResourceManager.GetString("PvB_HeaderCaptionPlayer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thinking-Time left.
        /// </summary>
        public static string PvB_MaximalThinkingTimeLabelCaption {
            get {
                return ResourceManager.GetString("PvB_MaximalThinkingTimeLabelCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moves left.
        /// </summary>
        public static string PvB_MovesLeftLabelCaption {
            get {
                return ResourceManager.GetString("PvB_MovesLeftLabelCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &gt;&gt;no bot loded&lt;&lt;.
        /// </summary>
        public static string PvB_NoBotLoadedCaption {
            get {
                return ResourceManager.GetString("PvB_NoBotLoadedCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Help and About.
        /// </summary>
        public static string PvB_OpenInfoButtonToolTipCaption {
            get {
                return ResourceManager.GetString("PvB_OpenInfoButtonToolTipCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Game Progress.
        /// </summary>
        public static string PvB_ProgressCaption {
            get {
                return ResourceManager.GetString("PvB_ProgressCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Input the compressed Progress:.
        /// </summary>
        public static string PvB_ProgressInputDialogPromt {
            get {
                return ResourceManager.GetString("PvB_ProgressInputDialogPromt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save Game Progress of currently ended game.
        /// </summary>
        public static string PvB_SaveGameProgressFileDialogTitle {
            get {
                return ResourceManager.GetString("PvB_SaveGameProgressFileDialogTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start Game.
        /// </summary>
        public static string PvB_StartGameButtonToolTipCaption {
            get {
                return ResourceManager.GetString("PvB_StartGameButtonToolTipCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to From file.
        /// </summary>
        public static string PvB_StartGameFromFileButtonCaption {
            get {
                return ResourceManager.GetString("PvB_StartGameFromFileButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to From string.
        /// </summary>
        public static string PvB_StartGameFromStringButtonCaption {
            get {
                return ResourceManager.GetString("PvB_StartGameFromStringButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Play with white pawn (start player).
        /// </summary>
        public static string PvB_StartOption_BottomPlayer {
            get {
                return ResourceManager.GetString("PvB_StartOption_BottomPlayer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Play with black pawn.
        /// </summary>
        public static string PvB_StartOption_TopPlayer {
            get {
                return ResourceManager.GetString("PvB_StartOption_TopPlayer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start Game from Progress-File.
        /// </summary>
        public static string PvB_StartWithProgressGameButtonToolTipCaption {
            get {
                return ResourceManager.GetString("PvB_StartWithProgressGameButtonToolTipCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Walls.
        /// </summary>
        public static string PvB_WallsLeftLabelCaption {
            get {
                return ResourceManager.GetString("PvB_WallsLeftLabelCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1. Browse for a bot-dll on the hard-drive and load it.
        /// </summary>
        public static string PvBH_Explanation01 {
            get {
                return ResourceManager.GetString("PvBH_Explanation01", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 2. Start a game (if a bot was loaded).
        /// </summary>
        public static string PvBH_Explanation02 {
            get {
                return ResourceManager.GetString("PvBH_Explanation02", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 3. Start a game from a progress (if a bot was loaded).
        /// </summary>
        public static string PvBH_Explanation03 {
            get {
                return ResourceManager.GetString("PvBH_Explanation03", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 4. Name of the bot you are playing against.
        /// </summary>
        public static string PvBH_Explanation04 {
            get {
                return ResourceManager.GetString("PvBH_Explanation04", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 5. Choose language.
        /// </summary>
        public static string PvBH_Explanation05 {
            get {
                return ResourceManager.GetString("PvBH_Explanation05", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 6. Open Help.
        /// </summary>
        public static string PvBH_Explanation06 {
            get {
                return ResourceManager.GetString("PvBH_Explanation06", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 7. Expand or collapse the game-progress.
        /// </summary>
        public static string PvBH_Explanation07 {
            get {
                return ResourceManager.GetString("PvBH_Explanation07", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 8. Save current game-progress to a text-file.
        /// </summary>
        public static string PvBH_Explanation08 {
            get {
                return ResourceManager.GetString("PvBH_Explanation08", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 9. Activate/deactivate auto-scroll-down of the game-progress.
        /// </summary>
        public static string PvBH_Explanation09 {
            get {
                return ResourceManager.GetString("PvBH_Explanation09", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 10. The progress of the ongoing game.
        /// </summary>
        public static string PvBH_Explanation10 {
            get {
                return ResourceManager.GetString("PvBH_Explanation10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 11. Number of walls, which the bot has left to spend.
        /// </summary>
        public static string PvBH_Explanation11 {
            get {
                return ResourceManager.GetString("PvBH_Explanation11", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 12. Save current debug-output to a text-file.
        /// </summary>
        public static string PvBH_Explanation12 {
            get {
                return ResourceManager.GetString("PvBH_Explanation12", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 13. Activate/deactivate auto-scroll-down of the debug-output.
        /// </summary>
        public static string PvBH_Explanation13 {
            get {
                return ResourceManager.GetString("PvBH_Explanation13", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 14. Expand or collapse the debug-output.
        /// </summary>
        public static string PvBH_Explanation14 {
            get {
                return ResourceManager.GetString("PvBH_Explanation14", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 15. Debug-output of the ongoing game.
        /// </summary>
        public static string PvBH_Explanation15 {
            get {
                return ResourceManager.GetString("PvBH_Explanation15", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 16. Placed walls on the boad.
        /// </summary>
        public static string PvBH_Explanation16 {
            get {
                return ResourceManager.GetString("PvBH_Explanation16", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 17. Pawn of the bot (white).
        /// </summary>
        public static string PvBH_Explanation17 {
            get {
                return ResourceManager.GetString("PvBH_Explanation17", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 18. Pawn of the player (black).
        /// </summary>
        public static string PvBH_Explanation18 {
            get {
                return ResourceManager.GetString("PvBH_Explanation18", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 19. Possible moving-field for your pawn.
        /// </summary>
        public static string PvBH_Explanation19 {
            get {
                return ResourceManager.GetString("PvBH_Explanation19", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 20. Resign from the game -&gt; the bot wins.
        /// </summary>
        public static string PvBH_Explanation20 {
            get {
                return ResourceManager.GetString("PvBH_Explanation20", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 21. Number of walls, which you have left to spend.
        /// </summary>
        public static string PvBH_Explanation21 {
            get {
                return ResourceManager.GetString("PvBH_Explanation21", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 22. Compressed progress string.
        /// </summary>
        public static string PvBH_Explanation22 {
            get {
                return ResourceManager.GetString("PvBH_Explanation22", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 23. Copy compressed progress string to clipboard.
        /// </summary>
        public static string PvBH_Explanation23 {
            get {
                return ResourceManager.GetString("PvBH_Explanation23", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Note: To submit a move just click on the board on the UI. You get a preview for wall-placement as well as for moving the pawn..
        /// </summary>
        public static string PvBH_Note {
            get {
                return ResourceManager.GetString("PvBH_Note", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overview to &apos;Player vs Bot&apos;.
        /// </summary>
        public static string PvBH_PageHeader {
            get {
                return ResourceManager.GetString("PvBH_PageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The progress is empty or invalid.
        /// </summary>
        public static string PVR_EmptyOrInvalid {
            get {
                return ResourceManager.GetString("PVR_EmptyOrInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connot be loaded as progress.
        /// </summary>
        public static string PVR_ErrorMsg_ProgressCannotBeLoaded {
            get {
                return ResourceManager.GetString("PVR_ErrorMsg_ProgressCannotBeLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reason.
        /// </summary>
        public static string PVR_ErrorMsg_Reason {
            get {
                return ResourceManager.GetString("PVR_ErrorMsg_Reason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The progress contains an invalid move.
        /// </summary>
        public static string PVR_ProgressContainsInvalidMove {
            get {
                return ResourceManager.GetString("PVR_ProgressContainsInvalidMove", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The progress contains more moves than allowed in the upcomming game.
        /// </summary>
        public static string PVR_ProgressContainsMoreMovesThanAllowed {
            get {
                return ResourceManager.GetString("PVR_ProgressContainsMoreMovesThanAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The progress contains a game which already ended.
        /// </summary>
        public static string PVR_ProgressContainsTerminatedGame {
            get {
                return ResourceManager.GetString("PVR_ProgressContainsTerminatedGame", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Example.
        /// </summary>
        public static string QNP_ExampleParagraphHeader {
            get {
                return ResourceManager.GetString("QNP_ExampleParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this notation the pawn on picture 2 are on &apos;c3&apos; and &apos;e8&apos;. The positions of the walls would be denoted as &apos;d4h&apos; and &apos;f8v&apos;..
        /// </summary>
        public static string QNP_ExampleParagraphText {
            get {
                return ResourceManager.GetString("QNP_ExampleParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Move (Figure).
        /// </summary>
        public static string QNP_FigureMoveParagraphHeader {
            get {
                return ResourceManager.GetString("QNP_FigureMoveParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A move, where the pawn is relocated is noted by the field he is stepping on. If, for example, a player moves from c3 to c4, this move is written down as &apos;c4&apos;..
        /// </summary>
        public static string QNP_FigureMoveParagraphText {
            get {
                return ResourceManager.GetString("QNP_FigureMoveParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to General.
        /// </summary>
        public static string QNP_GeneralParagraphHeader {
            get {
                return ResourceManager.GetString("QNP_GeneralParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Because there is no offical Quoridor-notation, one for was created for the OpenQuoridorFramework. It is derived from several notations used across the quoridor-community..
        /// </summary>
        public static string QNP_GeneralParagraphText {
            get {
                return ResourceManager.GetString("QNP_GeneralParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Quoridor - Notation.
        /// </summary>
        public static string QNP_PageHeader {
            get {
                return ResourceManager.GetString("QNP_PageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Picture 1.
        /// </summary>
        public static string QNP_Picture1Caption {
            get {
                return ResourceManager.GetString("QNP_Picture1Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Picture 2.
        /// </summary>
        public static string QNP_Picture2Caption {
            get {
                return ResourceManager.GetString("QNP_Picture2Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Board.
        /// </summary>
        public static string QNP_TheBoardParagraphHeader {
            get {
                return ResourceManager.GetString("QNP_TheBoardParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To address a field uniquely all rows are coded by the numbers 1 to 9 and all columns are coded by the letters &apos;a&apos; to &apos;i&apos; (picture 1). This results in a game-space of 81 fields from a1 in the lower left corner to i9 in the upper right corner..
        /// </summary>
        public static string QNP_TheBoardParagraphText {
            get {
                return ResourceManager.GetString("QNP_TheBoardParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Move (Wall).
        /// </summary>
        public static string QNP_WallMoveParagraphHeader {
            get {
                return ResourceManager.GetString("QNP_WallMoveParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When a wall is placed on the board this move gets notates by the unique position of this wall. A wall have to be placed between four field. Therefore it is sufficent to store one of these four fields. This notation uses the upper left field for this purpose. Additional the orientation has to be noted. If the wall is placed vertically this is denoted by an &apos;v&apos;. Or an &apos;h&apos; for horizontal placed walls..
        /// </summary>
        public static string QNP_WallMoveParagraphText {
            get {
                return ResourceManager.GetString("QNP_WallMoveParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Game Flow.
        /// </summary>
        public static string QRP_GameFlowParagraphHeader {
            get {
                return ResourceManager.GetString("QRP_GameFlowParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Both players move alternating until a winner is determined. When it is one player&apos;s turn, he have to choose between two different kinds of moves. Ether he has to move his pawn by one space or he has to place a wall on the board. If a player has no walls left, he has to move. The figure can only be moved by one space horizontal oder vertical, but not diagonal, not over a wall and not off the board. If the decides to place a wall, it is important to place this wall only between four fields, but not overlappin [rest of string was truncated]&quot;;.
        /// </summary>
        public static string QRP_GameFlowParagraphText {
            get {
                return ResourceManager.GetString("QRP_GameFlowParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Game Goal.
        /// </summary>
        public static string QRP_GameGoalParagraphHeader {
            get {
                return ResourceManager.GetString("QRP_GameGoalParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The game ends immediately when one pawn reaches on field of the most opposite row. This player wins..
        /// </summary>
        public static string QRP_GameGoalParagraphText {
            get {
                return ResourceManager.GetString("QRP_GameGoalParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Game Setup.
        /// </summary>
        public static string QRP_GameSetupParagraphHeader {
            get {
                return ResourceManager.GetString("QRP_GameSetupParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Quoridor is played on a board with 9 by 9 fields with spaces between these fields (picture 1). On the Board are two pawns, which are moved from field to field and there are 20 Walls that can be placed between the fields. On startup the pawns are placed on the fields e1 and e9 (see Quoridor-Notation). The player who controls the pawn on field e1 starts first..
        /// </summary>
        public static string QRP_GameSetupParagraphText {
            get {
                return ResourceManager.GetString("QRP_GameSetupParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to General.
        /// </summary>
        public static string QRP_GeneralParagraphHeader {
            get {
                return ResourceManager.GetString("QRP_GeneralParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Quoridor is an abstract strategy game for 2 or 4 Player. The OpenQuoridorFramework only considers the 2-player-game. Therefor only those rules are presented here..
        /// </summary>
        public static string QRP_GeneralParagraphText {
            get {
                return ResourceManager.GetString("QRP_GeneralParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Quoridor - Rules.
        /// </summary>
        public static string QRP_PageHeader {
            get {
                return ResourceManager.GetString("QRP_PageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Picture 1.
        /// </summary>
        public static string QRP_Picture1Caption {
            get {
                return ResourceManager.GetString("QRP_Picture1Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Picture 2.
        /// </summary>
        public static string QRP_Picture2Caption {
            get {
                return ResourceManager.GetString("QRP_Picture2Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Picture 3.
        /// </summary>
        public static string QRP_Picture3Caption {
            get {
                return ResourceManager.GetString("QRP_Picture3Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Picture 4.
        /// </summary>
        public static string QRP_Picture4Caption {
            get {
                return ResourceManager.GetString("QRP_Picture4Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Picture 5.
        /// </summary>
        public static string QRP_Picture5Caption {
            get {
                return ResourceManager.GetString("QRP_Picture5Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Special moving rules.
        /// </summary>
        public static string QRP_SpecialMoveParagraphHeader {
            get {
                return ResourceManager.GetString("QRP_SpecialMoveParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If two pawns are in adjecent fields, so that one could step on the other (picture 2), this pawn can jump over the other pawn (picture 3). If the jumping pawn cannot reach the field behind the other pawn (because there is a wall or the end of the board), he can jump diagonal to the left or right of the pawn. Of course in this scenario the fields to jump on have to be reachable. The pictures 4 and 5 show two of these situations with the possible moves. .
        /// </summary>
        public static string QRP_SpecialMoveParagraphText {
            get {
                return ResourceManager.GetString("QRP_SpecialMoveParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Browse.
        /// </summary>
        public static string RV_BrowseFileButtonCaption {
            get {
                return ResourceManager.GetString("RV_BrowseFileButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Progress-file or compressed progress.
        /// </summary>
        public static string RV_InputPromtLabelCaption {
            get {
                return ResourceManager.GetString("RV_InputPromtLabelCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Load and start.
        /// </summary>
        public static string RV_LoadAndStartButtonCaption {
            get {
                return ResourceManager.GetString("RV_LoadAndStartButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Next.
        /// </summary>
        public static string RV_NextStepButtonCaption {
            get {
                return ResourceManager.GetString("RV_NextStepButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Previous.
        /// </summary>
        public static string RV_PrevStepButtonCaption {
            get {
                return ResourceManager.GetString("RV_PrevStepButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Progress.
        /// </summary>
        public static string RV_ProgressSectionHeader {
            get {
                return ResourceManager.GetString("RV_ProgressSectionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Help &amp; About.
        /// </summary>
        public static string RV_ShowAboutHelpButtonCaption {
            get {
                return ResourceManager.GetString("RV_ShowAboutHelpButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1. Load replay from game-progress.
        /// </summary>
        public static string RVH_Explanation01 {
            get {
                return ResourceManager.GetString("RVH_Explanation01", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 2. Enter here path to progress-file or enter a compressed progress string directly.
        /// </summary>
        public static string RVH_Explanation02 {
            get {
                return ResourceManager.GetString("RVH_Explanation02", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 3. Browse for progress-file.
        /// </summary>
        public static string RVH_Explanation03 {
            get {
                return ResourceManager.GetString("RVH_Explanation03", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 4. Show help- and about-pages.
        /// </summary>
        public static string RVH_Explanation04 {
            get {
                return ResourceManager.GetString("RVH_Explanation04", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 5. Choose your favorite language.
        /// </summary>
        public static string RVH_Explanation05 {
            get {
                return ResourceManager.GetString("RVH_Explanation05", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 6. Jump to previous step of the replay.
        /// </summary>
        public static string RVH_Explanation06 {
            get {
                return ResourceManager.GetString("RVH_Explanation06", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 7. See and navigate through the currently loaded progress.
        /// </summary>
        public static string RVH_Explanation07 {
            get {
                return ResourceManager.GetString("RVH_Explanation07", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 8. Jump to next step of the replay.
        /// </summary>
        public static string RVH_Explanation08 {
            get {
                return ResourceManager.GetString("RVH_Explanation08", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 9. Currently loaded progress.
        /// </summary>
        public static string RVH_Explanation09 {
            get {
                return ResourceManager.GetString("RVH_Explanation09", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 10. Currently displayed step of the progress.
        /// </summary>
        public static string RVH_Explanation10 {
            get {
                return ResourceManager.GetString("RVH_Explanation10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overview to &apos;Replay Viewer&apos;.
        /// </summary>
        public static string RVH_PageHeader {
            get {
                return ResourceManager.GetString("RVH_PageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to save the current game progress?.
        /// </summary>
        public static string SavingDialogMessage {
            get {
                return ResourceManager.GetString("SavingDialogMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel.
        /// </summary>
        public static string SID_CancelButtonCaption {
            get {
                return ResourceManager.GetString("SID_CancelButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ok.
        /// </summary>
        public static string SID_OkButtonCaption {
            get {
                return ResourceManager.GetString("SID_OkButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sry ... you got beaten by the bot.
        /// </summary>
        public static string WD_LoosingMessage {
            get {
                return ResourceManager.GetString("WD_LoosingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reason.
        /// </summary>
        public static string WD_Message_Reason {
            get {
                return ResourceManager.GetString("WD_Message_Reason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No.
        /// </summary>
        public static string WD_NoButtonCaption {
            get {
                return ResourceManager.GetString("WD_NoButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to save the Game?.
        /// </summary>
        public static string WD_SaveGameRequest {
            get {
                return ResourceManager.GetString("WD_SaveGameRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Congratulations! You beated the bot!.
        /// </summary>
        public static string WD_WinningMessage {
            get {
                return ResourceManager.GetString("WD_WinningMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Yes.
        /// </summary>
        public static string WD_YesButtonCaption {
            get {
                return ResourceManager.GetString("WD_YesButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capitulation.
        /// </summary>
        public static string WinningReason_Capitulation {
            get {
                return ResourceManager.GetString("WinningReason_Capitulation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum of allowed moves was exceeded.
        /// </summary>
        public static string WinningReason_ExceedanceOfMaxMoves {
            get {
                return ResourceManager.GetString("WinningReason_ExceedanceOfMaxMoves", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum thought time was exceeded.
        /// </summary>
        public static string WinningReason_ExceedanceOfThoughtTime {
            get {
                return ResourceManager.GetString("WinningReason_ExceedanceOfThoughtTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid move.
        /// </summary>
        public static string WinningReason_InvalidMode {
            get {
                return ResourceManager.GetString("WinningReason_InvalidMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Regular win (first on the other side).
        /// </summary>
        public static string WinningReason_RegularQuoridorWin {
            get {
                return ResourceManager.GetString("WinningReason_RegularQuoridorWin", resourceCulture);
            }
        }
    }
}
