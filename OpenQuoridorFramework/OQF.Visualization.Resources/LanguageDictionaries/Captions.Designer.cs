//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OQF.Visualization.Resources.LanguageDictionaries {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Captions {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Captions() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("OQF.Visualization.Resources.LanguageDictionaries.Captions", typeof(Captions).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Application ähnelt.
        /// </summary>
        public static string AP_ApplicationSectionHeader {
            get {
                return ResourceManager.GetString("AP_ApplicationSectionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Developers ähnelt.
        /// </summary>
        public static string AP_DeveloperSectionHeader {
            get {
                return ResourceManager.GetString("AP_DeveloperSectionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Licence ähnelt.
        /// </summary>
        public static string AP_LicenceSectionHeader {
            get {
                return ResourceManager.GetString("AP_LicenceSectionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die About OpenQuoridorFramework ähnelt.
        /// </summary>
        public static string AP_PageHeader {
            get {
                return ResourceManager.GetString("AP_PageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Inventor ähnelt.
        /// </summary>
        public static string AP_QuoridorInventorSubItem {
            get {
                return ResourceManager.GetString("AP_QuoridorInventorSubItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Publisher ähnelt.
        /// </summary>
        public static string AP_QuoridorPublisherSubItem {
            get {
                return ResourceManager.GetString("AP_QuoridorPublisherSubItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Quoridor ähnelt.
        /// </summary>
        public static string AP_QuoridorSectionHeader {
            get {
                return ResourceManager.GetString("AP_QuoridorSectionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SourceCode ähnelt.
        /// </summary>
        public static string AP_SourceCodeSectionHeader {
            get {
                return ResourceManager.GetString("AP_SourceCodeSectionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The sourceCode of the OpenQuoridorFramework can be found on gitHub ähnelt.
        /// </summary>
        public static string AP_SourceCodeSectionText {
            get {
                return ResourceManager.GetString("AP_SourceCodeSectionText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 3rd Party Usages ähnelt.
        /// </summary>
        public static string AP_ThirdPartySectionHeader {
            get {
                return ResourceManager.GetString("AP_ThirdPartySectionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Version ähnelt.
        /// </summary>
        public static string AP_VersionSectionHeader {
            get {
                return ResourceManager.GetString("AP_VersionSectionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Do you want exit during a ongoing game? ähnelt.
        /// </summary>
        public static string ClosingDialogMessage {
            get {
                return ResourceManager.GetString("ClosingDialogMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The file is empty or invalid ähnelt.
        /// </summary>
        public static string FVR_EmptyOrInvalidFile {
            get {
                return ResourceManager.GetString("FVR_EmptyOrInvalidFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The file contains an invalid move ähnelt.
        /// </summary>
        public static string FVR_FileContainsInvalidMove {
            get {
                return ResourceManager.GetString("FVR_FileContainsInvalidMove", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The file contains more moves than allowed in the upcomming game ähnelt.
        /// </summary>
        public static string FVR_FileContainsMoreMovesThanAllowed {
            get {
                return ResourceManager.GetString("FVR_FileContainsMoreMovesThanAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The file contains a game which already ended ähnelt.
        /// </summary>
        public static string FVR_FileContainsTerminatedGame {
            get {
                return ResourceManager.GetString("FVR_FileContainsTerminatedGame", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BoardState ähnelt.
        /// </summary>
        public static string HTWAB_BoardStateParagraphHeader {
            get {
                return ResourceManager.GetString("HTWAB_BoardStateParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The current situation on the board is represented by the BoardState-class. All game-relevant informations are stored in it: all placed walls, the states of both players and the player who&apos;s turn it is. Additional to that can the complete game-history be reviewed by looking at LastBoardState and LastMove. ähnelt.
        /// </summary>
        public static string HTWAB_BoardStateParagraphText {
            get {
                return ResourceManager.GetString("HTWAB_BoardStateParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Examplary implementation ähnelt.
        /// </summary>
        public static string HTWAB_ExampleParagraphHeader {
            get {
                return ResourceManager.GetString("HTWAB_ExampleParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The SimpleWalking bot is an examplary bot-implementation. You find it within the OpenQoridorFramework at &apos;OpenQuoridorFramework/Bots/SimpleWalkingBot/SimpleWalkingBot.cs&apos; within the Git-repository (see About). ähnelt.
        /// </summary>
        public static string HTWAB_ExampleParagraphText {
            get {
                return ResourceManager.GetString("HTWAB_ExampleParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die FieldCoordinate ähnelt.
        /// </summary>
        public static string HTWAB_FieldCoordinateParagraphHeader {
            get {
                return ResourceManager.GetString("HTWAB_FieldCoordinateParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A FieldCoordinate defines a unique position on the board (see Quoridor-notation). The X- and Y-coordinate are implemented as enumerations. ähnelt.
        /// </summary>
        public static string HTWAB_FieldCoordinateParagraphText {
            get {
                return ResourceManager.GetString("HTWAB_FieldCoordinateParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die GameContraints ähnelt.
        /// </summary>
        public static string HTWAB_GameConstraintsParagraphHeader {
            get {
                return ResourceManager.GetString("HTWAB_GameConstraintsParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The GameConstraints-class contains the two restrictions for a bot for a game. One is the maximal timespan a bot can take to think about its next move. The other is the maximum of total moves each player can make in this game, before it is aborted. ähnelt.
        /// </summary>
        public static string HTWAB_GameConstraintsParagraphText {
            get {
                return ResourceManager.GetString("HTWAB_GameConstraintsParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1. The method Init(PlayerType, GameConstraints) is called. Thereby the bot is told on which side of the board he is starting and how the constraints for the upcomming game are. ähnelt.
        /// </summary>
        public static string HTWAB_GameFlowItem1 {
            get {
                return ResourceManager.GetString("HTWAB_GameFlowItem1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 2. Now the game is started. Every time when its the turn of the bot, the method DoMove(BoardState) is called. The argument tells how the current situation of the board is. ähnelt.
        /// </summary>
        public static string HTWAB_GameFlowItem2 {
            get {
                return ResourceManager.GetString("HTWAB_GameFlowItem2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 3. Now the bot has so much time, as the GameConstraints told him, to fire the NextMoveAvailable-Event to submit his next move. ähnelt.
        /// </summary>
        public static string HTWAB_GameFlowItem3 {
            get {
                return ResourceManager.GetString("HTWAB_GameFlowItem3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 4. Then it is the opponend players turn. When he has finished moving and it is your turn again, the DoMove(BoardState)-method is called again. This will be repeated until there is a winner. ähnelt.
        /// </summary>
        public static string HTWAB_GameFlowItem4 {
            get {
                return ResourceManager.GetString("HTWAB_GameFlowItem4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 5. A bot can always submit a debug-message to the UI by fireing the DebugMessageAvailable-Event. ähnelt.
        /// </summary>
        public static string HTWAB_GameFlowItem5 {
            get {
                return ResourceManager.GetString("HTWAB_GameFlowItem5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The bot&apos;s view of the Gameflow ähnelt.
        /// </summary>
        public static string HTWAB_GameFlowParagraphHeader {
            get {
                return ResourceManager.GetString("HTWAB_GameFlowParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1. Create new solution with an empty project (of type ClassLibrary) ähnelt.
        /// </summary>
        public static string HTWAB_GeneralProceedingItem1 {
            get {
                return ResourceManager.GetString("HTWAB_GeneralProceedingItem1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 2. Add OQF.Bot.Contracts.dll as reference to the project ähnelt.
        /// </summary>
        public static string HTWAB_GeneralProceedingItem2 {
            get {
                return ResourceManager.GetString("HTWAB_GeneralProceedingItem2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 3. Create a bot-class and derive it from IQuoridorBot ähnelt.
        /// </summary>
        public static string HTWAB_GeneralProceedingItem3 {
            get {
                return ResourceManager.GetString("HTWAB_GeneralProceedingItem3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 4. Implement the IQuoridor-interface ähnelt.
        /// </summary>
        public static string HTWAB_GeneralProceedingItem4 {
            get {
                return ResourceManager.GetString("HTWAB_GeneralProceedingItem4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 5. Start an test-application (e.g. PlayerVsBot) and test your bot ähnelt.
        /// </summary>
        public static string HTWAB_GeneralProceedingItem5 {
            get {
                return ResourceManager.GetString("HTWAB_GeneralProceedingItem5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die General Proceeding ähnelt.
        /// </summary>
        public static string HTWAB_GeneralProceedingParagraphHeader {
            get {
                return ResourceManager.GetString("HTWAB_GeneralProceedingParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Hint ähnelt.
        /// </summary>
        public static string HTWAB_HintParagraphHeader {
            get {
                return ResourceManager.GetString("HTWAB_HintParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die You can simplify your debugging-process by modifying the properties of your bot-project in a way that the test-application PlayerVsBot is started automaticly with the bot loaded every time you start debugging. To do so (an example is shown in the picture above) you have to adjust the StartAction to launch the PlayerVsBot-application. In addition to that you have to add the result of the build-process (your bot-dll) as command-line-parameter for the test-application. Don&apos;t forget the quotation marks! ähnelt.
        /// </summary>
        public static string HTWAB_HintParagraphText {
            get {
                return ResourceManager.GetString("HTWAB_HintParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Important Classes/Enums/Structs at the OQF.Bot.Contracts.dll ähnelt.
        /// </summary>
        public static string HTWAB_ImportantClassesParagraphHeader {
            get {
                return ResourceManager.GetString("HTWAB_ImportantClassesParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Note: All classes and structs are designed and implemented as immutables. ähnelt.
        /// </summary>
        public static string HTWAB_ImportantClassesParagraphNote {
            get {
                return ResourceManager.GetString("HTWAB_ImportantClassesParagraphNote", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Move(s) ähnelt.
        /// </summary>
        public static string HTWAB_MovesParagraphHeader {
            get {
                return ResourceManager.GetString("HTWAB_MovesParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Based on the abstract superclass Move, there are 3 different moves to choose from each turn. The FigureMove, to move the Pawn, the WallMove, to place a wall on the board, and the Capitulation, if you think there is no chance of winning any more. ähnelt.
        /// </summary>
        public static string HTWAB_MovesParagraphText {
            get {
                return ResourceManager.GetString("HTWAB_MovesParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die How to write a bot ähnelt.
        /// </summary>
        public static string HTWAB_PageHeader {
            get {
                return ResourceManager.GetString("HTWAB_PageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Player and PlayerState ähnelt.
        /// </summary>
        public static string HTWAB_PlayerAndStateParagraphHeader {
            get {
                return ResourceManager.GetString("HTWAB_PlayerAndStateParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The Player-class defines the invariant values of a player. These are the name of player and his starting position (PlayerType) on the board. The current status of a player is represented by the PlayerState-class. There you can find a reference to the player, the current position of the player on the board and number of wall the has left to spend. ähnelt.
        /// </summary>
        public static string HTWAB_PlayerAndStateParagraphText {
            get {
                return ResourceManager.GetString("HTWAB_PlayerAndStateParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Wall ähnelt.
        /// </summary>
        public static string HTWAB_WallParagraphHeader {
            get {
                return ResourceManager.GetString("HTWAB_WallParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The Wall-Class defines a wall on the board by its position and orientation (see Quoridor-notation). The position is FieldCoordinate and the orientation is defined by another enumeration. ähnelt.
        /// </summary>
        public static string HTWAB_WallParagraphText {
            get {
                return ResourceManager.GetString("HTWAB_WallParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die About ähnelt.
        /// </summary>
        public static string IP_AboutButtonCaption {
            get {
                return ResourceManager.GetString("IP_AboutButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Application Help ähnelt.
        /// </summary>
        public static string IP_BotVsBotIntoButtonCaption {
            get {
                return ResourceManager.GetString("IP_BotVsBotIntoButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Close ähnelt.
        /// </summary>
        public static string IP_CloseButtonCaption {
            get {
                return ResourceManager.GetString("IP_CloseButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die How to write a bot ähnelt.
        /// </summary>
        public static string IP_HowToWriteABotButtonCaption {
            get {
                return ResourceManager.GetString("IP_HowToWriteABotButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Application Help ähnelt.
        /// </summary>
        public static string IP_PlayerVsBotInfoButtonCaption {
            get {
                return ResourceManager.GetString("IP_PlayerVsBotInfoButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Quoridor Notation ähnelt.
        /// </summary>
        public static string IP_QuoridorNotationButtonCaption {
            get {
                return ResourceManager.GetString("IP_QuoridorNotationButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Quoridor Rules ähnelt.
        /// </summary>
        public static string IP_QuoridorRulesButtonCaption {
            get {
                return ResourceManager.GetString("IP_QuoridorRulesButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Application Help ähnelt.
        /// </summary>
        public static string IP_ReplayViewerInfoButtonCaption {
            get {
                return ResourceManager.GetString("IP_ReplayViewerInfoButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Application Help ähnelt.
        /// </summary>
        public static string IP_TournamentInfoButtonCaption {
            get {
                return ResourceManager.GetString("IP_TournamentInfoButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ok ähnelt.
        /// </summary>
        public static string ND_OkButtonCaption {
            get {
                return ResourceManager.GetString("ND_OkButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Auto scroll down ähnelt.
        /// </summary>
        public static string PvB_AutoScrollDownCheckBoxCaption {
            get {
                return ResourceManager.GetString("PvB_AutoScrollDownCheckBoxCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Bot Name ähnelt.
        /// </summary>
        public static string PvB_BotNameLabelCaption {
            get {
                return ResourceManager.GetString("PvB_BotNameLabelCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Browse for Bot-DLL ähnelt.
        /// </summary>
        public static string PvB_BrowseForBotButtonToolTipCaption {
            get {
                return ResourceManager.GetString("PvB_BrowseForBotButtonToolTipCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Capitulate ähnelt.
        /// </summary>
        public static string PvB_CapitulateButtonCaption {
            get {
                return ResourceManager.GetString("PvB_CapitulateButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Debug ähnelt.
        /// </summary>
        public static string PvB_DebugCaption {
            get {
                return ResourceManager.GetString("PvB_DebugCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Save current Debug output ähnelt.
        /// </summary>
        public static string PvB_DumpDebugFileDialogTitle {
            get {
                return ResourceManager.GetString("PvB_DumpDebugFileDialogTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Save ähnelt.
        /// </summary>
        public static string PvB_DumpDebugToFileButtonCaption {
            get {
                return ResourceManager.GetString("PvB_DumpDebugToFileButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Save current Progress ähnelt.
        /// </summary>
        public static string PvB_DumpProgressFileDialogTitle {
            get {
                return ResourceManager.GetString("PvB_DumpProgressFileDialogTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Save ähnelt.
        /// </summary>
        public static string PvB_DumpProgressToFileButtonCaption {
            get {
                return ResourceManager.GetString("PvB_DumpProgressToFileButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Bot cannot be loaded as assembly ähnelt.
        /// </summary>
        public static string PvB_ErrorMsg_BotCanNotBeLoadedFromAsembly {
            get {
                return ResourceManager.GetString("PvB_ErrorMsg_BotCanNotBeLoadedFromAsembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die File does not exist ähnelt.
        /// </summary>
        public static string PvB_ErrorMsg_FileDoesNotExist {
            get {
                return ResourceManager.GetString("PvB_ErrorMsg_FileDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die File is no valid assembly ähnelt.
        /// </summary>
        public static string PvB_ErrorMsg_FileIsNoAssembly {
            get {
                return ResourceManager.GetString("PvB_ErrorMsg_FileIsNoAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die You have to choose a Bot-DLL before Starting a game ähnelt.
        /// </summary>
        public static string PvB_ErrorMsg_NoDllPath {
            get {
                return ResourceManager.GetString("PvB_ErrorMsg_NoDllPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The text-file connot be loaded as progress-file ähnelt.
        /// </summary>
        public static string PvB_ErrorMsg_ProgressFileCannotBeLoaded {
            get {
                return ResourceManager.GetString("PvB_ErrorMsg_ProgressFileCannotBeLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Reason ähnelt.
        /// </summary>
        public static string PvB_ErrorMsg_Reason {
            get {
                return ResourceManager.GetString("PvB_ErrorMsg_Reason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Player ähnelt.
        /// </summary>
        public static string PvB_HeaderCaptionPlayer {
            get {
                return ResourceManager.GetString("PvB_HeaderCaptionPlayer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Thinking-Time left ähnelt.
        /// </summary>
        public static string PvB_MaximalThinkingTimeLabelCaption {
            get {
                return ResourceManager.GetString("PvB_MaximalThinkingTimeLabelCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Moves left ähnelt.
        /// </summary>
        public static string PvB_MovesLeftLabelCaption {
            get {
                return ResourceManager.GetString("PvB_MovesLeftLabelCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Help and About ähnelt.
        /// </summary>
        public static string PvB_OpenInfoButtonToolTipCaption {
            get {
                return ResourceManager.GetString("PvB_OpenInfoButtonToolTipCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Game Progress ähnelt.
        /// </summary>
        public static string PvB_ProgressCaption {
            get {
                return ResourceManager.GetString("PvB_ProgressCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Save Game Progress of currently ended game ähnelt.
        /// </summary>
        public static string PvB_SaveGameProgressFileDialogTitle {
            get {
                return ResourceManager.GetString("PvB_SaveGameProgressFileDialogTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Start Game ähnelt.
        /// </summary>
        public static string PvB_StartGameButtonToolTipCaption {
            get {
                return ResourceManager.GetString("PvB_StartGameButtonToolTipCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Start Game from Progress-File ähnelt.
        /// </summary>
        public static string PvB_StartWithProgressGameButtonToolTipCaption {
            get {
                return ResourceManager.GetString("PvB_StartWithProgressGameButtonToolTipCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Walls ähnelt.
        /// </summary>
        public static string PvB_WallsLeftLabelCaption {
            get {
                return ResourceManager.GetString("PvB_WallsLeftLabelCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1. Browse for a bot-dll on the hard-drive and load it ähnelt.
        /// </summary>
        public static string PvBH_Explanation01 {
            get {
                return ResourceManager.GetString("PvBH_Explanation01", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 2. Start a game (if a bot was loaded) ähnelt.
        /// </summary>
        public static string PvBH_Explanation02 {
            get {
                return ResourceManager.GetString("PvBH_Explanation02", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 3. Start a game from progress-file (if a bot was loaded) ähnelt.
        /// </summary>
        public static string PvBH_Explanation03 {
            get {
                return ResourceManager.GetString("PvBH_Explanation03", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 4. Name of the bot you are playing against ähnelt.
        /// </summary>
        public static string PvBH_Explanation04 {
            get {
                return ResourceManager.GetString("PvBH_Explanation04", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 5. Choose language ähnelt.
        /// </summary>
        public static string PvBH_Explanation05 {
            get {
                return ResourceManager.GetString("PvBH_Explanation05", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 6. Open Help ähnelt.
        /// </summary>
        public static string PvBH_Explanation06 {
            get {
                return ResourceManager.GetString("PvBH_Explanation06", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 7. Expand or collapse the game-progress ähnelt.
        /// </summary>
        public static string PvBH_Explanation07 {
            get {
                return ResourceManager.GetString("PvBH_Explanation07", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 8. Save current game-progress to a text-file ähnelt.
        /// </summary>
        public static string PvBH_Explanation08 {
            get {
                return ResourceManager.GetString("PvBH_Explanation08", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 9. Activate/deactivate auto-scroll-down of the game-progress ähnelt.
        /// </summary>
        public static string PvBH_Explanation09 {
            get {
                return ResourceManager.GetString("PvBH_Explanation09", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 10. The progress of the ongoing game ähnelt.
        /// </summary>
        public static string PvBH_Explanation10 {
            get {
                return ResourceManager.GetString("PvBH_Explanation10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 11. Number of walls, which the bot has left to spend ähnelt.
        /// </summary>
        public static string PvBH_Explanation11 {
            get {
                return ResourceManager.GetString("PvBH_Explanation11", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 12. Save current debug-output to a text-file ähnelt.
        /// </summary>
        public static string PvBH_Explanation12 {
            get {
                return ResourceManager.GetString("PvBH_Explanation12", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 13. Activate/deactivate auto-scroll-down of the debug-output ähnelt.
        /// </summary>
        public static string PvBH_Explanation13 {
            get {
                return ResourceManager.GetString("PvBH_Explanation13", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 14. Expand or collapse the debug-output ähnelt.
        /// </summary>
        public static string PvBH_Explanation14 {
            get {
                return ResourceManager.GetString("PvBH_Explanation14", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 15. Debug-output of the ongoing game ähnelt.
        /// </summary>
        public static string PvBH_Explanation15 {
            get {
                return ResourceManager.GetString("PvBH_Explanation15", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 16. Placed walls on the boad ähnelt.
        /// </summary>
        public static string PvBH_Explanation16 {
            get {
                return ResourceManager.GetString("PvBH_Explanation16", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 17. Pawn of the bot (white) ähnelt.
        /// </summary>
        public static string PvBH_Explanation17 {
            get {
                return ResourceManager.GetString("PvBH_Explanation17", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 18. Pawn of the player (black) ähnelt.
        /// </summary>
        public static string PvBH_Explanation18 {
            get {
                return ResourceManager.GetString("PvBH_Explanation18", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 19. Possible moving-field for your pawn ähnelt.
        /// </summary>
        public static string PvBH_Explanation19 {
            get {
                return ResourceManager.GetString("PvBH_Explanation19", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 20. Resign from the game -&gt; the bot wins ähnelt.
        /// </summary>
        public static string PvBH_Explanation20 {
            get {
                return ResourceManager.GetString("PvBH_Explanation20", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 21. Number of walls, which you have left to spend ähnelt.
        /// </summary>
        public static string PvBH_Explanation21 {
            get {
                return ResourceManager.GetString("PvBH_Explanation21", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Note: To submit a move just click on the board on the UI. You get a preview for wall-placement as well as for moving the pawn. ähnelt.
        /// </summary>
        public static string PvBH_Note {
            get {
                return ResourceManager.GetString("PvBH_Note", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Overview to &apos;Player vs Bot&apos; ähnelt.
        /// </summary>
        public static string PvBH_PageHeader {
            get {
                return ResourceManager.GetString("PvBH_PageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Example ähnelt.
        /// </summary>
        public static string QNP_ExampleParagraphHeader {
            get {
                return ResourceManager.GetString("QNP_ExampleParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In this notation the pawn on picture 2 are on &apos;c3&apos; and &apos;e8&apos;. The positions of the walls would be denoted as &apos;d4h&apos; and &apos;f8v&apos;. ähnelt.
        /// </summary>
        public static string QNP_ExampleParagraphText {
            get {
                return ResourceManager.GetString("QNP_ExampleParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Move (Figure) ähnelt.
        /// </summary>
        public static string QNP_FigureMoveParagraphHeader {
            get {
                return ResourceManager.GetString("QNP_FigureMoveParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A move, where the pawn is relocated is noted by the field he is stepping on. If, for example, a player moves from c3 to c4, this move is written down as &apos;c4&apos;. ähnelt.
        /// </summary>
        public static string QNP_FigureMoveParagraphText {
            get {
                return ResourceManager.GetString("QNP_FigureMoveParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die General ähnelt.
        /// </summary>
        public static string QNP_GeneralParagraphHeader {
            get {
                return ResourceManager.GetString("QNP_GeneralParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Because there is no offical Quoridor-notation, one for was created for the OpenQuoridorFramework. It is derived from several notations used across the quoridor-community. ähnelt.
        /// </summary>
        public static string QNP_GeneralParagraphText {
            get {
                return ResourceManager.GetString("QNP_GeneralParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Quoridor - Notation ähnelt.
        /// </summary>
        public static string QNP_PageHeader {
            get {
                return ResourceManager.GetString("QNP_PageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Picture 1 ähnelt.
        /// </summary>
        public static string QNP_Picture1Caption {
            get {
                return ResourceManager.GetString("QNP_Picture1Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Picture 2 ähnelt.
        /// </summary>
        public static string QNP_Picture2Caption {
            get {
                return ResourceManager.GetString("QNP_Picture2Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The Board ähnelt.
        /// </summary>
        public static string QNP_TheBoardParagraphHeader {
            get {
                return ResourceManager.GetString("QNP_TheBoardParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die To address a field uniquely all rows are coded by the numbers 1 to 9 and all columns are coded by the letters &apos;a&apos; to &apos;i&apos; (picture 1). This results in a game-space of 81 fields from a1 in the lower left corner to i9 in the upper right corner. ähnelt.
        /// </summary>
        public static string QNP_TheBoardParagraphText {
            get {
                return ResourceManager.GetString("QNP_TheBoardParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Move (Wall) ähnelt.
        /// </summary>
        public static string QNP_WallMoveParagraphHeader {
            get {
                return ResourceManager.GetString("QNP_WallMoveParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die When a wall is placed on the board this move gets notates by the unique position of this wall. A wall have to be placed between four field. Therefore it is sufficent to store one of these four fields. This notation uses the upper left field for this purpose. Additional the orientation has to be noted. If the wall is placed vertically this is denoted by an &apos;v&apos;. Or an &apos;h&apos; for horizontal placed walls. ähnelt.
        /// </summary>
        public static string QNP_WallMoveParagraphText {
            get {
                return ResourceManager.GetString("QNP_WallMoveParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Game Flow ähnelt.
        /// </summary>
        public static string QRP_GameFlowParagraphHeader {
            get {
                return ResourceManager.GetString("QRP_GameFlowParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Both players move alternating until a winner is determined. When it is one player&apos;s turn, he have to choose between two different kinds of moves. Ether he has to move his pawn by one space or he has to place a wall on the board. If a player has no walls left, he has to move. The figure can only be moved by one space horizontal oder vertical, but not diagonal, not over a wall and not off the board. If the decides to place a wall, it is important to place this wall only between four fields, but not overlappin [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        public static string QRP_GameFlowParagraphText {
            get {
                return ResourceManager.GetString("QRP_GameFlowParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Game Goal ähnelt.
        /// </summary>
        public static string QRP_GameGoalParagraphHeader {
            get {
                return ResourceManager.GetString("QRP_GameGoalParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The game ends immediately when one pawn reaches on field of the most opposite row. This player wins. ähnelt.
        /// </summary>
        public static string QRP_GameGoalParagraphText {
            get {
                return ResourceManager.GetString("QRP_GameGoalParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Game Setup ähnelt.
        /// </summary>
        public static string QRP_GameSetupParagraphHeader {
            get {
                return ResourceManager.GetString("QRP_GameSetupParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Quoridor is played on a board with 9 by 9 fields with spaces between these fields (picture 1). On the Board are two pawns, which are moved from field to field and there are 20 Walls that can be placed between the fields. On startup the pawns are placed on the fields e1 and e9 (see Quoridor-Notation). The player who controls the pawn on field e1 starts first. ähnelt.
        /// </summary>
        public static string QRP_GameSetupParagraphText {
            get {
                return ResourceManager.GetString("QRP_GameSetupParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die General ähnelt.
        /// </summary>
        public static string QRP_GeneralParagraphHeader {
            get {
                return ResourceManager.GetString("QRP_GeneralParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Quoridor is an abstract strategy game for 2 or 4 Player. The OpenQuoridorFramework only considers the 2-player-game. Therefor only those rules are presented here. ähnelt.
        /// </summary>
        public static string QRP_GeneralParagraphText {
            get {
                return ResourceManager.GetString("QRP_GeneralParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Quoridor - Rules ähnelt.
        /// </summary>
        public static string QRP_PageHeader {
            get {
                return ResourceManager.GetString("QRP_PageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Picture 1 ähnelt.
        /// </summary>
        public static string QRP_Picture1Caption {
            get {
                return ResourceManager.GetString("QRP_Picture1Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Picture 2 ähnelt.
        /// </summary>
        public static string QRP_Picture2Caption {
            get {
                return ResourceManager.GetString("QRP_Picture2Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Picture 3 ähnelt.
        /// </summary>
        public static string QRP_Picture3Caption {
            get {
                return ResourceManager.GetString("QRP_Picture3Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Picture 4 ähnelt.
        /// </summary>
        public static string QRP_Picture4Caption {
            get {
                return ResourceManager.GetString("QRP_Picture4Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Picture 5 ähnelt.
        /// </summary>
        public static string QRP_Picture5Caption {
            get {
                return ResourceManager.GetString("QRP_Picture5Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Special moving rules ähnelt.
        /// </summary>
        public static string QRP_SpecialMoveParagraphHeader {
            get {
                return ResourceManager.GetString("QRP_SpecialMoveParagraphHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die If two pawns are in adjecent fields, so that one could step on the other (picture 2), this pawn can jump over the other pawn (picture 3). If the jumping pawn cannot reach the field behind the other pawn (because there is a wall or the end of the board), he can jump diagonal to the left or right of the pawn. Of course in this scenario the fields to jump on have to be reachable. The pictures 4 and 5 show two of these situations with the possible moves.  ähnelt.
        /// </summary>
        public static string QRP_SpecialMoveParagraphText {
            get {
                return ResourceManager.GetString("QRP_SpecialMoveParagraphText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Do you want to save the current game progress? ähnelt.
        /// </summary>
        public static string SavingDialogMessage {
            get {
                return ResourceManager.GetString("SavingDialogMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sry ... you got beaten by the bot ähnelt.
        /// </summary>
        public static string WD_LoosingMessage {
            get {
                return ResourceManager.GetString("WD_LoosingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Reason ähnelt.
        /// </summary>
        public static string WD_Message_Reason {
            get {
                return ResourceManager.GetString("WD_Message_Reason", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No ähnelt.
        /// </summary>
        public static string WD_NoButtonCaption {
            get {
                return ResourceManager.GetString("WD_NoButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Do you want to save the Game? ähnelt.
        /// </summary>
        public static string WD_SaveGameRequest {
            get {
                return ResourceManager.GetString("WD_SaveGameRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Congratulations! You beated the bot! ähnelt.
        /// </summary>
        public static string WD_WinningMessage {
            get {
                return ResourceManager.GetString("WD_WinningMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Yes ähnelt.
        /// </summary>
        public static string WD_YesButtonCaption {
            get {
                return ResourceManager.GetString("WD_YesButtonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Capitulation ähnelt.
        /// </summary>
        public static string WinningReason_Capitulation {
            get {
                return ResourceManager.GetString("WinningReason_Capitulation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The maximum of allowed moves was exceeded ähnelt.
        /// </summary>
        public static string WinningReason_ExceedanceOfMaxMoves {
            get {
                return ResourceManager.GetString("WinningReason_ExceedanceOfMaxMoves", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The maximum thought time was exceeded ähnelt.
        /// </summary>
        public static string WinningReason_ExceedanceOfThoughtTime {
            get {
                return ResourceManager.GetString("WinningReason_ExceedanceOfThoughtTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Invalid move ähnelt.
        /// </summary>
        public static string WinningReason_InvalidMode {
            get {
                return ResourceManager.GetString("WinningReason_InvalidMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Regular win (first on the other side) ähnelt.
        /// </summary>
        public static string WinningReason_RegularQuoridorWin {
            get {
                return ResourceManager.GetString("WinningReason_RegularQuoridorWin", resourceCulture);
            }
        }
    }
}
